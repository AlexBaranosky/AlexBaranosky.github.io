<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: midje | My Octopress Blog]]></title>
  <link href="http://yoursite.com/blog/categories/midje/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-10-24T22:15:19-07:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Many Faces of Midje Fakes]]></title>
    <link href="http://yoursite.com/blog/2012/02/27/many-faces-of-midje-fakes/"/>
    <updated>2012-02-27T19:21:00-08:00</updated>
    <id>http://yoursite.com/blog/2012/02/27/many-faces-of-midje-fakes</id>
    <content type="html"><![CDATA[<div class='post'>
The <a href="https://github.com/marick/Midje">Midje</a> Clojure testing library enables top-down development, and the primary tool it has for enabling it is the fake.<br /><br />In Midje, you don't have mock objects like you do in object-oriented languages, instead you fake out functions. The simplest way you can fake out functions is by using the provided form within your fact.<br /><br /><h3>Fakes</h3><pre class="brush: clj; gutter: false;"><br />(unfinished doubler)<br /><br />(defn six-times [x]<br />  (* 3 (doubler x)))<br /><br />(fact<br />  (six-times ..n..) => 12<br />  (provided<br />    (doubler ..n..) => 4))<br /></pre> <br/>(Things that look like ..x.. are called Midje metaconstants.  For now just pretend they are constants, or skip to the end of this article for a link to the wiki.)<br /><br />In the above example we've managed to define six-times in terms of a function, doubler, that is not yet defined (it is unfinished).<br /><br />Presumably the next thing we'd do when designing a piece of software like this is to write the fact for doubler.<br /><pre class="brush: clj; gutter: false;"><br />(fact <br />  (doubler 2) => 4)<br /><br />(defn doubler [n] (* 2 n))<br /></pre><br/>Or perhaps write a more thorough test:<br /><pre class="brush: clj; gutter: false;"><br />(tabular<br />  (fact (doubler n) => result)<br /><br />  n    result<br />  -2   -4<br />  -1   -2<br />  0    0<br />  1    2<br />  2    4<br />  100  200  )<br /></pre><br/>(Tabular is a way to write one fact that runs against multiple input sets.)<br /><br /><h3>The Myriad Uses of Fakes</h3><br />Fakes have other uses besides simple stubbing.<br /><br />They can also be used to verify call counts. Imagine that you want to check that when some data is not valid there are no calls to send-email, but otherwise there will be 1 call sent to each recipient?<br /><br />We can write this kind of test using the :times n prerequisite option. (where n is some non-negative integer) <pre class="brush: clj; gutter: false;"><br />(fact "don't send emails when data is invalid"<br />  (email-job :alex :brian) => irrelevant<br />  (provided<br />    (valid-data?) => false<br />    (email anything) => nil :times 0 ))<br /><br />(fact "when data is valid send one email to each recipient"<br />  (email-job :alex :brian) => irrelevant<br />  (provided<br />    (valid-data?) => true<br />    (email :alex) => nil :times 1<br />    (email :brian) => nil :times 1 ))<br /><br />;; The implementation<br /><br />(unfinished valid-data? email)<br /><br />(defn email-job [& dudes]<br />  (when (valid-data?)<br />    (doseq [d dudes]<br />      (email d))))<br /></pre><br /><h3>Checkers</h3><br />Using checkers we can even expand on the idea of what can be checked by a provided.  In the above examples first we used the anything checker to check that the email function was never called with anything. Then we simply checked that the email function was called with :alex and :brian once each.  <br /><br />In this example we want to check that the query function is called with 10 things that look like query maps. To do that we first need to create our own checker that checks whether the parameter looks like a query. <br/><pre class="brush: clj; gutter: false;"><br />(defchecker a-query [actual]<br />  (and (:target-db actual) (:query-plan actual)))<br /></pre><br />Midje will say that any arg matches this checker if it has a non-false/non-nil :target-db and :query-plan.<br /><br />Let's confirm query is called 10 times with params that look like queries.<br /><pre class="brush: clj; gutter: false;"><br />(fact "always sends 10 queries"<br />  (execute-queries) => irrelevant<br />  (provided<br />    (query a-query) => irrelevant :times 10))<br /><br />;; The implementation<br /><br />(unfinished query)<br /><br />(defn execute-queries []<br />  (dotimes [_ 10]<br />    (query {:target-db :foo       ;; this will pass because it looks like a-query<br />            :query-plan :bar})))  ;; but (query {:another "map"}) would not pass<br /><br /><br /></pre><h3>The Fake Chain Gang</h3><br />If you've ever violated The Law of Demeter in an object-oriented language and then tried to use mock objects with the offending class, you may have experienced a chain of mocks.<br /><br />A chain of mocks is when you mock a method on a mock object that itself returns another mock object, that has a method on it mocked to *finally* return the value you want.<br /><br />when(mockA.call()).thenReturn(mockB);<br />when(mockB.call()).thenReturn(mockC);<br />when(mockC.call()).thenReturn(42);<br /><br />In Midje the naive approach might be to write something like:<br /><pre class="brush: clj; gutter: false;"><br />(fact<br />  (foo) => 42<br />  (provided <br />    (baz) => ..a.. ;; remember, just pretend they're constants<br />    (bar ..a..) => ..b..<br />    (qux ..b..) => 42))<br /><br />;; The implementation<br /><br />(unfinished baz bar qux)<br /><br />(defn foo [] <br />  (qux (bar (baz))))<br /></pre><br/>Midje supplies a feature called Folded Prerequisites that enable a nice condensed syntax for this, though it is probably a code smell if you are doing this too often.<br /><pre class="brush: clj; gutter: false;"><br />(fact<br />  (foo) => 42<br />  (provided<br />    (qux (bar (baz))) => 42))<br /></pre><br /><h3>Fakes That Cover Multiple Facts</h3><br />There are other ways to make fakes in Midje as well, by using the background macro and the against-background macros. These give you the ability to write fakes that cover a group of fakes.  I think I'll talk about them in another blog though time permitting.<br /><br /><h3>Wiki Links</h3><a href="https://github.com/marick/Midje/wiki/Metaconstants">Metaconstants</a><br /><a href="https://github.com/marick/Midje/wiki/Checkers-within-prerequisites">Using Checkers in Fakes</a><br /><a href="https://github.com/marick/Midje/wiki/Folded-prerequisites">Folded Prerequisites</a></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Hema Powar</div>
<div class='content'>
Hey, saw your write ups. It is quite interesting. Please share your profile at hema.powar@wipro.com if you are looking for job. We have projects for a reputed client in Cupertino CA. Think you might have guessed the client already :-) <br /><br />Reach out to me at 201-272-6303</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD in Midje in a Nutshell]]></title>
    <link href="http://yoursite.com/blog/2012/02/19/tdd-in-midje-in-nutshell/"/>
    <updated>2012-02-19T17:41:00-08:00</updated>
    <id>http://yoursite.com/blog/2012/02/19/tdd-in-midje-in-nutshell</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="https://github.com/marick/Midje">Midje</a> is a Clojure testing library supporting a top-down mock function style of development, but also equally well supports a bottom-up style.<br /><br />This is an introductory article, and depending on the response, there will be more articles about some of the intermediate and advanced features.<br /><br /><h3>Elegant Examples</h3><br />Midje starts with a simple premise: that tests should be elegant and readable.<br /><br />When was the last time you saw code samples like this in somebody's blog, gist, or book?<br /><br />EXAMPLE:<br /><i>As you can see the foo function always returns&nbsp;:a-ham-sandwich</i><br /><br />(foo :bar :baz)<br />;=&gt; :a-ham-sandwich<br /><br />As developers, I think we write examples like this, because it reads well to us. We're used to this sort of pseudo-code example style, and so we can all tell at a glance what's happening.<br /><br />This is where Midje enters. The below is executable Clojure Midje code:<br /><script type="syntaxhighlighter" class="brush: clj; gutter: false;">&lt;![CDATA[ (fact "the foo function always returns :a-ham-sandwich"   (foo :bar :baz) => :a-ham-sandwich) ]]&gt;</script>You can take that code, and run it, now, and if you've defined foo, then you can run `lein midje` or use midje-mode in Emacs to confirm that foo does in fact always return :a-ham-sandwich. (Forget for now that this particular fact doesn't very well cover every possible input. Using a generated test input style of testing could be very useful here, but that is for another blog.)<br /><br /><h3>Describing Code That Doesn't Exist - Yet</h3><br />Let's try describing some code that doesn't yet exist with these kinds of examples.  I think if we jot down some example cases, it will help us think more clearly about what we're trying to get our code doing.<br /><script type="syntaxhighlighter" class="brush: clj; gutter: false;">&lt;![CDATA[ (fact "doubles odd numbers"   (my-func 3) => 6)  (fact "triples even numbers"   (my-func 4) => 12) ]]&gt;</script>We can run these examples now. First thing you'll notice is that we're getting errors; that's of course because we have not yet written any code. Let's add the my-func function.<br /><pre class="brush: clj; gutter: false;">(defn my-func [n] )<br /></pre>Let's be cautious and just try to get one of these facts working first.<br /><pre class="brush: clj; gutter: false;">(defn my-func [n]<br />  (* 2 n))<br /></pre>This seems to work... but for only the first fact. (There's a lot to be said for how effectively TDD can help you to stay focused on the task at hand.)<br /><br />So let's get my-func to pass the second fact as well.<br /><pre class="brush: clj; gutter: false;">(defn my-func [n]<br />  (if (odd? n)<br />    (* 2 n)<br />    (* 3 n))<br /></pre>Running those examples again with lein midje or midje mode, we see that they do indeed pass.<br /><br />But there's one more thing. There is a little bit of duplication left in my-func. Let's take a second, and refactor this a little.<br /><pre class="brush: clj; gutter: false;">(defn my-func [n]<br />  (let [multiplier (if (odd? n) 2 3)]<br />    (* multiplier n))<br /></pre>Now that we've revealed a new concept of a multiplier in our code, it looks like we are done.  Our code works as advertised.<br /><br /><h3>TDD Recap</h3><br />You just learned:<br /><ul><li>how to use Midje facts as a form of executable examples</li><li>how to do TDD</li></ul>Nice.<br /><br />I was sneaky just then. Without letting you know what I was doing, I've walked you through the 4 steps of TDD. Decide what you are testing, write a failing test, make that test pass, refactor the code to have a good design.<br /><br /><h4>TDD Steps:</h4><ol><li>We chose a new piece of functionality we wanted the code to have.</li><li>We wrote a failing test.  We ran it.  We saw it fail. In Midje, we like to think of this step as taking some time to describe the facts of the future version of the code.</li><li>We wrote as little code as possible to make the test pass. In Midje, we think of this step as bringing the code up to date with the new facts.</li><li>We took some time to reorganize the code - giving it better structure, removing duplication, adjusting the naming, etc.</li></ol>Repeat.<br /><br />That's TDD in Midje in a nutshell.<br /><br />What did you think? Interested in hearing some more intermediate or advanced TDD and Midje concepts and exercises?<br /><br /><h3>Technicalities</h3><script type="syntaxhighlighter" class="brush: clj; gutter: false;">&lt;![CDATA[  ;; project.clj setup  (defproject my-project "0.1.0"   ;; ...   :dev-dependencies [[lein-midje "1.0.8"]                      [midje "1.4.0-SNAPSHOT"]])   ;; example with ns macro  (ns my-ns.t-core   (:use my-ns.core         midje.sweet))  (fact   (foo :bar :baz) => :a-ham-sandwich) ]]&gt;</script></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>id</div>
<div class='content'>
Look closely at this screenshot (note: with noscript allowing all scripts except for the notorious google tracking bs) : http://bit.ly/IyQf46<br /><br />&quot;As developers, I think we write examples like this (...)&quot;<br /><br />As developers, *we* know that to mark up *code* you don&#39;t use a *script* tag.<br />a) as a noscript user, your reader won&#39;t know which of the dozen bs js sources to (temporarily) allow<br />b) even if you allow js, it won&#39;t work. &quot;Can&#39;t find brush for: clj&quot;<br />c) you can&#39;t just read it. No JS: no content? Fail!<br /><br />For a bit of potential syntax highlighting, you break your article. I applaud you, dear developer.</div>
</div>
<div class='comment'>
<div class='author'>nodename.com</div>
<div class='content'>
Yes, keep it going!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
