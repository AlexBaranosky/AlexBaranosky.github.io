<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | (elegant coding from a more civilized age)]]></title>
  <link href="http://AlexBaranosky.github.io/categories/emacs/atom.xml" rel="self"/>
  <link href="http://AlexBaranosky.github.io/"/>
  <updated>2013-11-03T01:48:30-07:00</updated>
  <id>http://AlexBaranosky.github.io/</id>
  <author>
    <name><![CDATA[Alex Baranosky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs and GChat]]></title>
    <link href="http://AlexBaranosky.github.io/2013/11/emacs-and-gchat.html"/>
    <updated>2013-11-02T19:08:00-07:00</updated>
    <id>http://AlexBaranosky.github.io/2013/11/emacs-and-gchat</id>
    <content type="html"><![CDATA[<p>I was chatting with a friend on GChat today.  I found having to context switch to my browser so much to be distracting, and half-jokingly and off-handedly said: &ldquo;I should setup my Emacs with GChat&rdquo;.</p>

<p>A little Googling led me to <a href="http://www.emacswiki.org/emacs/GoogleTalk">Emacs Wiki: GoogleTalk</a>.</p>

<p>These are the steps I used to get GChat running pretty quickly:</p>

<ul>
<li><code>M-x package-list-packages</code>, installing &lsquo;jabber&rsquo;</li>
<li>add the below to my <code>init.el</code></li>
</ul>


<p>``` scheme</p>

<pre><code>(setq jabber-account-list           
  '(("my.email@gmail.com"                 
     (:network-server . "talk.google.com")           
     (:connection-type . ssl))))                     
</code></pre>

<p>```</p>

<ul>
<li><code>brew install gnutls</code> since I&rsquo;m on OSX</li>
<li><code>M-x jabber-connect-all</code>, entering in my password at the prompt</li>
<li>Then I can switch to the <code>*-jabber-roster-*</code> buffer, search for my friend&rsquo;s name in the list, and hit <code>RET</code> to start a chat with them.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Church of Emacs]]></title>
    <link href="http://AlexBaranosky.github.io/2013/10/church-of-emacs.html"/>
    <updated>2013-10-29T01:37:00-07:00</updated>
    <id>http://AlexBaranosky.github.io/2013/10/church-of-emacs</id>
    <content type="html"><![CDATA[<p><img src="/images/saint-button.png" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mass Clojure File Formatting With Emacs Batch Mode]]></title>
    <link href="http://AlexBaranosky.github.io/2013/10/mass-clojure-file-formatting-with-emacs-batch-mode.html"/>
    <updated>2013-10-29T00:51:00-07:00</updated>
    <id>http://AlexBaranosky.github.io/2013/10/mass-clojure-file-formatting-with-emacs-batch-mode</id>
    <content type="html"><![CDATA[<p>I do not profess to be a master of Emacs Lisp.  But after some time googling I figured out how I can mass code-format the code on some of our large projects at work.</p>

<p>It is pretty likely that you may need to tweak this to get it to work on your machine. Specifically, you&rsquo;ll have to point the script to the correct location of you clojure-mode installation.</p>

<p>This script calls <code>emacs</code> in <a href="http://www.emacswiki.org/emacs/BatchMode">Emacs in &mdash;batch mode</a>, which causes Emacs to run non-interacively.  We can use <code>--batch</code> to allow us to write scripts using Emacs.  Awesome, I know. :&ndash;)</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>find &ldquo;/path/to/your/project/.&rdquo; | while read file
do</p>

<pre><code>if [[ "$file" =~ ^.*\.clj$ ]]; then
    emacs "$file" \
          --batch \
          --eval="(progn 
                    (load \"~/.emacs.d/elpa/clojure-mode-2.0.0/clojure-mode\")
                    (require 'clojure-mode) 
                    (clojure-mode) 
                    (indent-region (point-min) (point-max)) 
                    (save-buffer))"
fi
</code></pre>

<p>done
```</p>

<h2>ShellCheck</h2>

<p>I recently discovered <a href="http://www.shellcheck.net/about.html">ShellCheck</a>, a static analysis and linting tool for sh/bash scripts.  When I ran it on the original version of my above script it found a number of issues. I really recommend you use it on your own scripts.</p>

<h4>Original Script</h4>

<p>``` bash</p>

<h1>!/bin/sh # bad, because I was using features on ly available in bash</h1>

<h2>can cause unexpected behavior</h2>

<p>for file in <code>find /path/to/your/project/.</code> ## `&rsquo;s deprecated
do</p>

<pre><code>if [[ $file =~ ^.*\.clj$ ]]; then ## [[ ]] only works in bash
    emacs $file \                 ## ... surround $file with "'s
          --batch \
          --eval="(progn 
                    (load \"~/.emacs.d/elpa/clojure-mode-2.0.0/clojure-mode\")
                    (require 'clojure-mode) 
                    (clojure-mode) 
                    (indent-region (point-min) (point-max)) 
                    (save-buffer))"
fi
</code></pre>

<p>done
```</p>
]]></content>
  </entry>
  
</feed>
