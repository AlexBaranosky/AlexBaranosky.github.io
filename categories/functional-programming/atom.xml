<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional-programming | (elegant coding from a more civilized age)]]></title>
  <link href="http://AlexBaranosky.github.io/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://AlexBaranosky.github.io/"/>
  <updated>2013-10-29T01:40:30-07:00</updated>
  <id>http://AlexBaranosky.github.io/</id>
  <author>
    <name><![CDATA[Alex Baranosky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IO as Data]]></title>
    <link href="http://AlexBaranosky.github.io/2013/08/io-as-data.html"/>
    <updated>2013-08-08T23:51:00-07:00</updated>
    <id>http://AlexBaranosky.github.io/2013/08/io-as-data</id>
    <content type="html"><![CDATA[<p>One way to make your Clojure code easier to test and to reason about is to quarantine your IO.  Amongst your team decide where you think the acceptable boundaries for IO are, and then don&rsquo;t do any IO except in those layers.  In my opinion the place to do IO is in the service layer, as described in Amit Rathore&rsquo;s talk at Clojure/West, <a href="http://www.infoq.com/presentations/DDD-Clojure">Domain-Driven Design With Clojure</a>.</p>

<p>What this can lead to is code patterned where instead of executing IO straight away, you instead compute IO IOUs: a pure function determines that some piece of IO should occur, and returns that fact encoded in some form of data.</p>

<h2>A Basic Example</h2>

<p>Say we have a map that tracks the inventory changes at a warehouse.  It typically looks like this:</p>

<p>``` clojure
(def an-example-inventory
  {:items {12345</p>

<pre><code>       {:product-id 12345
        :product-name ""
        :quantity 300
        ;; ...
        }}
</code></pre>

<p>   :actions {:order-from-factory []}}) ;; this is where the IO data goes</p>

<p>(defn remove-item-from-inventory
  [inventory {:keys [product-id] :as item}]
  (if (some-> inventory :items product-id :quantity count (> 0))</p>

<pre><code>(update-in inventory [:items product-id :quantity] dec)
(update-in inventory [:actions :order-from-factory] conj product-id)))
</code></pre>

<p>```</p>

<p>Then at a later stage of processing this code, at an outer layer that deals with IO, we can look over the actions on the inventory map and processes them accordingly.</p>

<h2>Ramifications of This Style</h2>

<p>A cool side effect of this is that if you want to change how your IO gets evaluated it will all be in a handful of well-defined places.  This makes switching out implementation details easier.  Also, it makes converting to asynchronous IO more straightforward if the IO becomes a blocker to the performance of the system.</p>

<p>Your code becomes less coupled to implementation details of your IO, and instead talks more about the computed intended effects. Unit testability of the system goes up, because everything except the service layer, is just pure functions and data.</p>
]]></content>
  </entry>
  
</feed>
